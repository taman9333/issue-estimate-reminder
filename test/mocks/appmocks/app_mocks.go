// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/taman9333/issue-estimate-reminder/internal/app (interfaces: GitHubClientFactory,GitHubCommenter)
//
// Generated by this command:
//
//	mockgen -destination=../../test/mocks/appmocks/app_mocks.go -package=appmocks . GitHubClientFactory,GitHubCommenter
//

// Package appmocks is a generated GoMock package.
package appmocks

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v74/github"
	app "github.com/taman9333/issue-estimate-reminder/internal/app"
	gomock "go.uber.org/mock/gomock"
)

// MockGitHubClientFactory is a mock of GitHubClientFactory interface.
type MockGitHubClientFactory struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubClientFactoryMockRecorder
	isgomock struct{}
}

// MockGitHubClientFactoryMockRecorder is the mock recorder for MockGitHubClientFactory.
type MockGitHubClientFactoryMockRecorder struct {
	mock *MockGitHubClientFactory
}

// NewMockGitHubClientFactory creates a new mock instance.
func NewMockGitHubClientFactory(ctrl *gomock.Controller) *MockGitHubClientFactory {
	mock := &MockGitHubClientFactory{ctrl: ctrl}
	mock.recorder = &MockGitHubClientFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubClientFactory) EXPECT() *MockGitHubClientFactoryMockRecorder {
	return m.recorder
}

// CreateInstallationClient mocks base method.
func (m *MockGitHubClientFactory) CreateInstallationClient(installationID int64) (app.GitHubCommenter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallationClient", installationID)
	ret0, _ := ret[0].(app.GitHubCommenter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstallationClient indicates an expected call of CreateInstallationClient.
func (mr *MockGitHubClientFactoryMockRecorder) CreateInstallationClient(installationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallationClient", reflect.TypeOf((*MockGitHubClientFactory)(nil).CreateInstallationClient), installationID)
}

// MockGitHubCommenter is a mock of GitHubCommenter interface.
type MockGitHubCommenter struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubCommenterMockRecorder
	isgomock struct{}
}

// MockGitHubCommenterMockRecorder is the mock recorder for MockGitHubCommenter.
type MockGitHubCommenterMockRecorder struct {
	mock *MockGitHubCommenter
}

// NewMockGitHubCommenter creates a new mock instance.
func NewMockGitHubCommenter(ctrl *gomock.Controller) *MockGitHubCommenter {
	mock := &MockGitHubCommenter{ctrl: ctrl}
	mock.recorder = &MockGitHubCommenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubCommenter) EXPECT() *MockGitHubCommenterMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockGitHubCommenter) CreateComment(ctx context.Context, owner, repo string, number int, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, owner, repo, number, comment)
	ret0, _ := ret[0].(*github.IssueComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockGitHubCommenterMockRecorder) CreateComment(ctx, owner, repo, number, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockGitHubCommenter)(nil).CreateComment), ctx, owner, repo, number, comment)
}
