// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=../../test/mocks/github_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	github "github.com/google/go-github/v74/github"
	github0 "github.com/taman9333/issue-estimate-reminder/internal/github"
	gomock "go.uber.org/mock/gomock"
)

// MockGitHubClientInterface is a mock of GitHubClientInterface interface.
type MockGitHubClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubClientInterfaceMockRecorder
	isgomock struct{}
}

// MockGitHubClientInterfaceMockRecorder is the mock recorder for MockGitHubClientInterface.
type MockGitHubClientInterfaceMockRecorder struct {
	mock *MockGitHubClientInterface
}

// NewMockGitHubClientInterface creates a new mock instance.
func NewMockGitHubClientInterface(ctrl *gomock.Controller) *MockGitHubClientInterface {
	mock := &MockGitHubClientInterface{ctrl: ctrl}
	mock.recorder = &MockGitHubClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubClientInterface) EXPECT() *MockGitHubClientInterfaceMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockGitHubClientInterface) CreateComment(ctx context.Context, owner, repo string, number int, comment *github.IssueComment) (*github.IssueComment, *github.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", ctx, owner, repo, number, comment)
	ret0, _ := ret[0].(*github.IssueComment)
	ret1, _ := ret[1].(*github.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockGitHubClientInterfaceMockRecorder) CreateComment(ctx, owner, repo, number, comment any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockGitHubClientInterface)(nil).CreateComment), ctx, owner, repo, number, comment)
}

// MockGitHubFactoryInterface is a mock of GitHubFactoryInterface interface.
type MockGitHubFactoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockGitHubFactoryInterfaceMockRecorder
	isgomock struct{}
}

// MockGitHubFactoryInterfaceMockRecorder is the mock recorder for MockGitHubFactoryInterface.
type MockGitHubFactoryInterfaceMockRecorder struct {
	mock *MockGitHubFactoryInterface
}

// NewMockGitHubFactoryInterface creates a new mock instance.
func NewMockGitHubFactoryInterface(ctrl *gomock.Controller) *MockGitHubFactoryInterface {
	mock := &MockGitHubFactoryInterface{ctrl: ctrl}
	mock.recorder = &MockGitHubFactoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitHubFactoryInterface) EXPECT() *MockGitHubFactoryInterfaceMockRecorder {
	return m.recorder
}

// CreateInstallationClient mocks base method.
func (m *MockGitHubFactoryInterface) CreateInstallationClient(installationID int64) (github0.GitHubClientInterface, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstallationClient", installationID)
	ret0, _ := ret[0].(github0.GitHubClientInterface)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstallationClient indicates an expected call of CreateInstallationClient.
func (mr *MockGitHubFactoryInterfaceMockRecorder) CreateInstallationClient(installationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstallationClient", reflect.TypeOf((*MockGitHubFactoryInterface)(nil).CreateInstallationClient), installationID)
}

// MockAuthInterface is a mock of AuthInterface interface.
type MockAuthInterface struct {
	ctrl     *gomock.Controller
	recorder *MockAuthInterfaceMockRecorder
	isgomock struct{}
}

// MockAuthInterfaceMockRecorder is the mock recorder for MockAuthInterface.
type MockAuthInterfaceMockRecorder struct {
	mock *MockAuthInterface
}

// NewMockAuthInterface creates a new mock instance.
func NewMockAuthInterface(ctrl *gomock.Controller) *MockAuthInterface {
	mock := &MockAuthInterface{ctrl: ctrl}
	mock.recorder = &MockAuthInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthInterface) EXPECT() *MockAuthInterfaceMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockAuthInterface) GenerateJWT() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockAuthInterfaceMockRecorder) GenerateJWT() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockAuthInterface)(nil).GenerateJWT))
}
