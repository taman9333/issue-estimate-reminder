// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=../../test/mocks/idempotencymocks/idempotency_mocks.go -package=idempotencymocks
//

// Package idempotencymocks is a generated GoMock package.
package idempotencymocks

import (
	context "context"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// IsProcessed mocks base method.
func (m *MockService) IsProcessed(ctx context.Context, deliveryID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProcessed", ctx, deliveryID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProcessed indicates an expected call of IsProcessed.
func (mr *MockServiceMockRecorder) IsProcessed(ctx, deliveryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProcessed", reflect.TypeOf((*MockService)(nil).IsProcessed), ctx, deliveryID)
}

// MarkProcessed mocks base method.
func (m *MockService) MarkProcessed(ctx context.Context, deliveryID string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkProcessed", ctx, deliveryID, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkProcessed indicates an expected call of MarkProcessed.
func (mr *MockServiceMockRecorder) MarkProcessed(ctx, deliveryID, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkProcessed", reflect.TypeOf((*MockService)(nil).MarkProcessed), ctx, deliveryID, ttl)
}
