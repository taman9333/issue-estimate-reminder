// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/taman9333/issue-estimate-reminder/internal/queue (interfaces: IdempotencyChecker,IssueOpenedHandler)
//
// Generated by this command:
//
//	mockgen -destination=../../test/mocks/queuemocks/queue_mocks.go -package=queuemocks . IdempotencyChecker,IssueOpenedHandler
//

// Package queuemocks is a generated GoMock package.
package queuemocks

import (
	context "context"
	reflect "reflect"
	time "time"

	github "github.com/google/go-github/v74/github"
	gomock "go.uber.org/mock/gomock"
)

// MockIdempotencyChecker is a mock of IdempotencyChecker interface.
type MockIdempotencyChecker struct {
	ctrl     *gomock.Controller
	recorder *MockIdempotencyCheckerMockRecorder
	isgomock struct{}
}

// MockIdempotencyCheckerMockRecorder is the mock recorder for MockIdempotencyChecker.
type MockIdempotencyCheckerMockRecorder struct {
	mock *MockIdempotencyChecker
}

// NewMockIdempotencyChecker creates a new mock instance.
func NewMockIdempotencyChecker(ctrl *gomock.Controller) *MockIdempotencyChecker {
	mock := &MockIdempotencyChecker{ctrl: ctrl}
	mock.recorder = &MockIdempotencyCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIdempotencyChecker) EXPECT() *MockIdempotencyCheckerMockRecorder {
	return m.recorder
}

// IsProcessed mocks base method.
func (m *MockIdempotencyChecker) IsProcessed(ctx context.Context, deliveryID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsProcessed", ctx, deliveryID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsProcessed indicates an expected call of IsProcessed.
func (mr *MockIdempotencyCheckerMockRecorder) IsProcessed(ctx, deliveryID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsProcessed", reflect.TypeOf((*MockIdempotencyChecker)(nil).IsProcessed), ctx, deliveryID)
}

// MarkProcessed mocks base method.
func (m *MockIdempotencyChecker) MarkProcessed(ctx context.Context, deliveryID string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkProcessed", ctx, deliveryID, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkProcessed indicates an expected call of MarkProcessed.
func (mr *MockIdempotencyCheckerMockRecorder) MarkProcessed(ctx, deliveryID, ttl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkProcessed", reflect.TypeOf((*MockIdempotencyChecker)(nil).MarkProcessed), ctx, deliveryID, ttl)
}

// MockIssueOpenedHandler is a mock of IssueOpenedHandler interface.
type MockIssueOpenedHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIssueOpenedHandlerMockRecorder
	isgomock struct{}
}

// MockIssueOpenedHandlerMockRecorder is the mock recorder for MockIssueOpenedHandler.
type MockIssueOpenedHandlerMockRecorder struct {
	mock *MockIssueOpenedHandler
}

// NewMockIssueOpenedHandler creates a new mock instance.
func NewMockIssueOpenedHandler(ctrl *gomock.Controller) *MockIssueOpenedHandler {
	mock := &MockIssueOpenedHandler{ctrl: ctrl}
	mock.recorder = &MockIssueOpenedHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueOpenedHandler) EXPECT() *MockIssueOpenedHandlerMockRecorder {
	return m.recorder
}

// HandleIssueOpened mocks base method.
func (m *MockIssueOpenedHandler) HandleIssueOpened(payload *github.IssuesEvent) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HandleIssueOpened", payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// HandleIssueOpened indicates an expected call of HandleIssueOpened.
func (mr *MockIssueOpenedHandlerMockRecorder) HandleIssueOpened(payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleIssueOpened", reflect.TypeOf((*MockIssueOpenedHandler)(nil).HandleIssueOpened), payload)
}
