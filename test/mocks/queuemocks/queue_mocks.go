// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=../../test/mocks/queuemocks/queue_mocks.go -package=queuemocks
//

// Package queuemocks is a generated GoMock package.
package queuemocks

import (
	context "context"
	reflect "reflect"

	queue "github.com/taman9333/issue-estimate-reminder/internal/queue"
	gomock "go.uber.org/mock/gomock"
)

// MockQueueClient is a mock of QueueClient interface.
type MockQueueClient struct {
	ctrl     *gomock.Controller
	recorder *MockQueueClientMockRecorder
	isgomock struct{}
}

// MockQueueClientMockRecorder is the mock recorder for MockQueueClient.
type MockQueueClientMockRecorder struct {
	mock *MockQueueClient
}

// NewMockQueueClient creates a new mock instance.
func NewMockQueueClient(ctrl *gomock.Controller) *MockQueueClient {
	mock := &MockQueueClient{ctrl: ctrl}
	mock.recorder = &MockQueueClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueueClient) EXPECT() *MockQueueClientMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockQueueClient) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockQueueClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockQueueClient)(nil).Close))
}

// EnqueueWebhook mocks base method.
func (m *MockQueueClient) EnqueueWebhook(ctx context.Context, payload *queue.WebhookPayload) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnqueueWebhook", ctx, payload)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnqueueWebhook indicates an expected call of EnqueueWebhook.
func (mr *MockQueueClientMockRecorder) EnqueueWebhook(ctx, payload any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnqueueWebhook", reflect.TypeOf((*MockQueueClient)(nil).EnqueueWebhook), ctx, payload)
}
